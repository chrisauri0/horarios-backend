generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model grupos {
  grupo_id       String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  tutor_id       String?          @db.Uuid
  metadata       Json?            @default("{}")
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  profesores     profesores?      @relation(fields: [tutor_id], references: [profesor_id], onUpdate: NoAction)
  turores_grupos turores_grupos[]
}

model horarios {
  id          Int       @id @default(autoincrement())
  nombregrupo String
  data        Json
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

model horarios_profes {
  id         Int       @id @default(autoincrement())
  name       String
  data       Json
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
}

model profesores {
  profesor_id    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nombre         String
  apellidos      String
  email          String
  can_be_tutor   Boolean?         @default(false)
  materias       Json?            @default("[]")
  metadata       Json?            @default("{}")
  created_at     DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?        @default(now()) @db.Timestamptz(6)
  grupos         grupos[]
  turores_grupos turores_grupos[]
}

model salones {
  id              Int       @id @default(autoincrement())
  nombre_salon    String
  nombre_edificio String
  data            Json
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
}

model turores_grupos {
  profesor_id String     @db.Uuid
  grupo_id    String     @db.Uuid
  role        String?    @default("tutor")
  assigned_at DateTime?  @default(now()) @db.Timestamptz(6)
  grupos      grupos     @relation(fields: [grupo_id], references: [grupo_id], onDelete: Cascade, onUpdate: NoAction)
  profesores  profesores @relation(fields: [profesor_id], references: [profesor_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([profesor_id, grupo_id])
}

model users {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  password_hash String
  full_name     String?
  role          String?   @default("user")
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  metadata      Json?     @default("{}")
}
